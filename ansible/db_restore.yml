---
- hosts: 127.0.0.1
  gather_facts: true
  vars:
    # Maria DB Repo details | Only for CentOS
    MariaDB_repo_url: ${mariadb_repo_url}
    MariaDB_repo_enable: ${mariadb_repo_enable}
    MariaDB_repo_gpgcheck: ${mariadb_repo_gpgcheck}
    MariaDB_repo_gpg_url: ${mariadb_repo_gpg_url}
    # OpenVPN Database Details | You need RDS setup to use these!
    openvpn_database_user: ${openvpn_database_user}
    openvpn_database_password: ${openvpn_database_password}
    openvpn_database_host: ${openvpn_database_host}
    openvpn_database_port: ${openvpn_database_port}
    openvpn_databases:
      - as_certs
      - as_userprop
      - as_config
      - as_log
  tasks:
  - name: Setup MariaDB repo for CentOS
    yum_repository:
      name: MariaDB
      description: MariaDB Repository
      baseurl: "{{ MariaDB_repo_url }}"
      enabled: "{{ MariaDB_repo_enable }}"
      gpgcheck: "{{ MariaDB_repo_gpgcheck }}"
      gpgkey: "{{ MariaDB_repo_gpg_url }}"
    register: mariadb_repo

  - name: Install MariaDB Client
    yum:
      name: "{{ item }}"
      state: latest
    with_items:
      - MariaDB-client
      - mariadb-libs
      - MySQL-python
  
  - name: Copy .my.cnf file with credentials
    copy:
      dest: /etc/.my.cnf
      owner: root
      mode: 0600
      content: |
        [client]
        user={{ openvpn_database_user }}
        password={{ openvpn_database_password }}
        port={{ openvpn_database_port }}
    register: db_creds  

  - name: Stop Openvpn server for to update DB credentials
    systemd:
      name: openvpnas
      state: stopped
    when: db_creds.changed
    register: openvpn_stopped
  
  - name: Use MySQL database settings
    copy:
      dest: /usr/local/openvpn_as/etc/as.conf
      owner: root
      mode: 0644
      content: |
        # OpenVPN AS 1.1 configuration file
        # NOTE:  The ~ symbol used below expands to the directory that
        # the configuration file is saved in
        # enable AS Connect functionality
        AS_CONNECT=true
        # temporary directory
        tmp_dir=~/tmp
        lic.dir=~/licenses
        # run_start retries
        run_start_retry.give_up=60
        run_start_retry.resample=10
        # enable client gateway
        sa.show_c2s_routes=true
        # certificates database
        certs_db=mysql://{{ openvpn_database_host }}/as_certs
        # user properties DB
        user_prop_db=mysql://{{ openvpn_database_host }}/as_userprop
        # configuration DB
        config_db=mysql://{{ openvpn_database_host }}/as_config
        # log DB
        log_db=mysql://{{ openvpn_database_host }}/as_log
        # wait this many seconds between failed retries
        db_retry.interval=2
        # how many retries to attempt before failing
        db_retry.n_attempts=6
        # On startup, wait up to n seconds for DB files to become
        # available if they do not yet exist.  This is generally
        # only useful on secondary nodes used for standby purposes.
        # db_startup_wait=
        # Node type: PRIMARY|SECONDARY.  Defaults to PRIMARY.
        # node_type=
        # bootstrap authentication via PAM -- allows
        # admin to log into web UI before authentication
        # system has been configured.  Configure PAM users
        # allowed to access via the bootstrap auth mechanism.
        boot_pam_service={{ openvpn_database_user }}
        boot_pam_users.0=openvpn
        # boot_pam_users.1=
        # boot_pam_users.2=
        # boot_pam_users.3=
        # boot_pam_users.4=
        # System users that are allowed to access the server agent XML API.
        # The user that the web server will run as should be in this list.
        system_users_local.0=root
        system_users_local.1=openvpn_as
        # The user/group that the web server will run as
        cs.user=openvpn_as
        cs.group=openvpn_as
        # socket directory
        general.sock_dir=~/sock
        # source directory for OpenVPN Windows executable
        # (Must have been built with MultiFileExtract)
        sa.win_exe_dir=~/exe
        # The company name will be shown in the UI
        sa.company_name=OpenVPN Technologies, Inc.
        # server agent socket
        sa.sock=~/sock/sagent
        # If enabled, automatically generate a client configuration
        # when a client logs into the site and successfully authenticates
        cs.auto_generate=true
        # files for web server (PEM format)
        cs.ca_bundle=~/web-ssl/ca.crt
        cs.priv_key=~/web-ssl/server.key
        cs.cert=~/web-ssl/server.crt
        # web server will use three consecutive ports starting at this
        # address, for use with the OpenVPN port share feature
        cs.dynamic_port_base=870
        # which service groups should be started during
        # server agent initialization
        sa.initial_run_groups.0=web_group
        #sa.initial_run_groups.1=openvpn_group
        # use this twisted reactor
        sa.reactor=epoll
        # The unit number of this particular AS configuration.
        # Normally set to 0.  If you have multiple, independent AS instances
        # running on the same machine, each should have a unique unit number.
        sa.unit=0
        # If true, open up web ports on the firewall using iptables
        iptables.web=true
        # OpenVPN user and groups
        vpn.server.user=openvpn_as
        vpn.server.group=openvpn_as
    when: openvpn_stopped.changed
    register: config_updated

  - name: Start openvpnas server for after migration
    systemd:
      name: openvpnas
      state: started
    when: config_updated.changed